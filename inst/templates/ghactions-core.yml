
    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      - uses: r-lib/actions/setup-tinytex@v2
        if: matrix.config.latex == 'true'

      - uses: r-lib/actions/setup-pandoc@v2

      # set date/week for use in cache creation
      # https://github.community/t5/GitHub-Actions/How-to-set-and-access-a-Workflow-variable/m-p/42970
      # - cache R packages daily
      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Cache R packages"
        if: runner.os != 'Windows'
        uses: pat-s/always-upload-cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      - name: "[Stage] [Linux] Install required system libs"
        if: runner.os == 'Linux'
        run: sudo apt install libcurl4-openssl-dev libgit2-dev

      # for some strange Windows reason this step and the next one need to be decoupled
      - name: "[Stage] Prepare"
        run: |
          Rscript -e "if (!requireNamespace('remotes')) install.packages('remotes', type = 'source')"
          Rscript -e "if (!requireNamespace('curl')) install.packages('curl', type = 'source')"

      - name: "[Stage] [macOS] Install libgit2"
        if: runner.os == 'macOS'
        run: brew install libgit2

      - name: "[Stage] [macOS] Install system libs for pkgdown"
        if: runner.os == 'macOS' && matrix.config.pkgdown != ''
        run: brew install harfbuzz fribidi

      - name: "[Stage] [Linux] Install system libs for pkgdown"
        if: runner.os == 'Linux' && matrix.config.pkgdown != ''
        run: sudo apt install libharfbuzz-dev libfribidi-dev

      # Try to automatically check for system dependencies and install them
      # Note: this might not catch all required system libs and manual action might be needed
      - name: "[Stage] [Linux] Install linux system dependencies"
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      # macOS devel needs its own stage because we need to work with an option to suppress the usage of binaries
      - name: "[Stage] Prepare & Install (macOS-devel)"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
        run: |
          echo -e 'options(Ncpus = 4, pkgType = "source", repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'

      - name: "[Stage] After Success"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'release'
        run: Rscript -e "tic::after_success()"

      - name: "[Stage] Upload R CMD check artifacts"
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
